{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\PROJECTS\\\\WEB DEV\\\\REACTT\\\\reactt\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport yellowBlob from \"./img/blob-yellow.png\";\nimport blueBlob from \"./img/blob-blue.png\";\nimport StartScreen from './comps/startScreen';\nimport Questions from './comps/questionsScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //   const [questions,setQuestions] = React.useState([])\n  //   const shuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);\n\n  //   React.useEffect(() => {\n  //     async function getapi() {\n  //         const res = await fetch(\"https://opentdb.com/api.php?amount=3&difficulty=easy&type=multiple\")\n  //         const data = await res.json()\n  //         let Q = []\n  //         data.results.forEach( question =>{\n  //           Q.push({\n  //             id: nanoid(),\n  //             answers : shuffleArray([...question.incorrect_answers, question.correct_answer]),\n  //             question: question.question,\n  //             correct : question.correct_answer,\n  //             checked : false,\n  //             selected: null\n  //           })\n  //         })\n  //         setQuestions(Q)\n  //       }\n  //     getapi()\n\n  // }, [])\n\n  const [show, setShow] = useState(false);\n  const [questions, setQuestions] = useState([]);\n  const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n  React.useEffect(() => {\n    fetch('https://opentdb.com/api.php?amount=5&category=21&difficulty=easy&type=multiple').then(respone => respone.json()).then(data => {\n      setQuestions(data.results);\n      setQuestionsAndAnswers(object => {\n        return {\n          question: object.question,\n          shuffledAnswers: shuffleArray([...object.incorrect_answers, ...object.correct_answer]),\n          correctAnswer: object.correct_answer,\n          selectedAnswer: \"\"\n        };\n      });\n    });\n  }, []);\n  const shuffleArray = arr => arr.sort(() => Math.random() - 0.5);\n  console.log(questionsAndAnswers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: yellowBlob,\n      className: \"blobs-yellow\",\n      alt: \"blob\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this), show ? /*#__PURE__*/_jsxDEV(Questions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(StartScreen, {\n      setShow: setShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: blueBlob,\n      className: \"blobs-blue\",\n      alt: \"blob\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"6E+yc/V/kI11tAKqpE2JupNE4Ww=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","yellowBlob","blueBlob","StartScreen","Questions","App","show","setShow","questions","setQuestions","questionsAndAnswers","setQuestionsAndAnswers","useEffect","fetch","then","respone","json","data","results","object","question","shuffledAnswers","shuffleArray","incorrect_answers","correct_answer","correctAnswer","selectedAnswer","arr","sort","Math","random","console","log"],"sources":["C:/Users/Administrator/Desktop/PROJECTS/WEB DEV/REACTT/reactt/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport './App.css';\nimport yellowBlob from \"./img/blob-yellow.png\"\nimport blueBlob from \"./img/blob-blue.png\"\nimport StartScreen from './comps/startScreen';\nimport Questions from './comps/questionsScreen';\n\n\nfunction App() {\n//   const [questions,setQuestions] = React.useState([])\n//   const shuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);\n\n//   React.useEffect(() => {\n//     async function getapi() {\n//         const res = await fetch(\"https://opentdb.com/api.php?amount=3&difficulty=easy&type=multiple\")\n//         const data = await res.json()\n//         let Q = []\n//         data.results.forEach( question =>{\n//           Q.push({\n//             id: nanoid(),\n//             answers : shuffleArray([...question.incorrect_answers, question.correct_answer]),\n//             question: question.question,\n//             correct : question.correct_answer,\n//             checked : false,\n//             selected: null\n//           })\n//         })\n//         setQuestions(Q)\n//       }\n//     getapi()\n\n// }, [])\n\nconst [show,setShow] = useState(false)\nconst [questions,setQuestions] = useState([])\nconst [questionsAndAnswers,setQuestionsAndAnswers] = useState([])\n\n      React.useEffect( () => {\n        fetch('https://opentdb.com/api.php?amount=5&category=21&difficulty=easy&type=multiple')\n        .then((respone) => respone.json())\n        .then((data) => {\n          setQuestions(data.results);\n          setQuestionsAndAnswers((object) => {\n              return{\n                question: object.question,\n                shuffledAnswers: shuffleArray([...object.incorrect_answers,\n                                                ...object.correct_answer]),\n                correctAnswer: object.correct_answer  ,\n                selectedAnswer : \"\"                             \n\n              }\n          } )\n        })\n      },[] )\n  const shuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);\n  console.log(questionsAndAnswers)\n  return (\n         <div>\n           <img src= {yellowBlob} className='blobs-yellow' alt='blob' />\n           { show ? <Questions />: <StartScreen setShow = {setShow} /> }\n           <img src= {blueBlob} className='blobs-blue' alt='blob'/>\n         </div>\n \n  );\n}\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,WAAW,MAAM,qBAAqB;AAC7C,OAAOC,SAAS,MAAM,yBAAyB;AAAC;AAGhD,SAASC,GAAG,GAAG;EAAA;EACf;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACtC,MAAM,CAACQ,SAAS,EAACC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAM,CAACU,mBAAmB,EAACC,sBAAsB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE3DD,KAAK,CAACa,SAAS,CAAE,MAAM;IACrBC,KAAK,CAAC,gFAAgF,CAAC,CACtFC,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAAEG,IAAI,IAAK;MACdR,YAAY,CAACQ,IAAI,CAACC,OAAO,CAAC;MAC1BP,sBAAsB,CAAEQ,MAAM,IAAK;QAC/B,OAAM;UACJC,QAAQ,EAAED,MAAM,CAACC,QAAQ;UACzBC,eAAe,EAAEC,YAAY,CAAC,CAAC,GAAGH,MAAM,CAACI,iBAAiB,EAC1B,GAAGJ,MAAM,CAACK,cAAc,CAAC,CAAC;UAC1DC,aAAa,EAAEN,MAAM,CAACK,cAAc;UACpCE,cAAc,EAAG;QAEnB,CAAC;MACL,CAAC,CAAE;IACL,CAAC,CAAC;EACJ,CAAC,EAAC,EAAE,CAAE;EACV,MAAMJ,YAAY,GAAIK,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;EACjEC,OAAO,CAACC,GAAG,CAACtB,mBAAmB,CAAC;EAChC,oBACO;IAAA,wBACE;MAAK,GAAG,EAAGT,UAAW;MAAC,SAAS,EAAC,cAAc;MAAC,GAAG,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAG,EAC3DK,IAAI,gBAAG,QAAC,SAAS;MAAA;MAAA;MAAA;IAAA,QAAG,gBAAE,QAAC,WAAW;MAAC,OAAO,EAAIC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG,eAC3D;MAAK,GAAG,EAAGL,QAAS;MAAC,SAAS,EAAC,YAAY;MAAC,GAAG,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACpD;AAGf;AAAC,GAxDQG,GAAG;AAAA,KAAHA,GAAG;AAyDZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}