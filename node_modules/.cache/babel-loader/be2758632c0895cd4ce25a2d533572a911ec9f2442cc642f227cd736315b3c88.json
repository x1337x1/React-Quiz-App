{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\PROJECTS\\\\WEB DEV\\\\REACTT\\\\reactt\\\\src\\\\comps\\\\questionsScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QuestionOne from './questionOne';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Questions() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n  React.useEffect(() => {\n    fetch('https://opentdb.com/api.php?amount=5&category=21&difficulty=easy&type=multiple').then(respone => respone.json()).then(data => {\n      setQuestions(data.results);\n      setQuestionsAndAnswers(data.results.map(object => {\n        return {\n          question: object.question,\n          shuffledAnswers: shuffleArray([...object.incorrect_answers, object.correct_answer]),\n          correctAnswer: object.correct_answer,\n          selectedAnswer: \"\"\n        };\n      }));\n    });\n  }, []);\n  function updateselected(currentQuestion, answer) {\n    setQuestionsAndAnswers(questionsAndAnswers.map(object => {\n      return object.question === currentQuestion ? {\n        ...object,\n        selectedAnswer: answer\n      } : object;\n    }));\n  }\n  const shuffleArray = arr => arr.sort(() => Math.random() - 0.5);\n  const Q = questionsAndAnswers.map((objects, index) => {\n    return /*#__PURE__*/_jsxDEV(QuestionOne, {\n      question: objects.question,\n      allAnswers: objects.shuffledAnswers,\n      updateselected: updateselected\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Q\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(Questions, \"yQEUZE0VG6Vn7dnjgoFV8lkI2FQ=\");\n_c = Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","QuestionOne","Questions","questions","setQuestions","questionsAndAnswers","setQuestionsAndAnswers","useEffect","fetch","then","respone","json","data","results","map","object","question","shuffledAnswers","shuffleArray","incorrect_answers","correct_answer","correctAnswer","selectedAnswer","updateselected","currentQuestion","answer","arr","sort","Math","random","Q","objects","index"],"sources":["C:/Users/Administrator/Desktop/PROJECTS/WEB DEV/REACTT/reactt/src/comps/questionsScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport QuestionOne from './questionOne';\r\n\r\nexport default function Questions(){\r\n    const [questions,setQuestions] = useState([])\r\n    const [questionsAndAnswers,setQuestionsAndAnswers] = useState([])\r\n\r\n      React.useEffect( () => {\r\n        fetch('https://opentdb.com/api.php?amount=5&category=21&difficulty=easy&type=multiple')\r\n        .then((respone) => respone.json())\r\n        .then((data) => {\r\n          setQuestions(data.results);\r\n\r\n          setQuestionsAndAnswers(data.results.map((object) => {\r\n              return{\r\n                question: object.question,\r\n                shuffledAnswers: shuffleArray([...object.incorrect_answers,\r\n                                                object.correct_answer]),\r\n                correctAnswer: object.correct_answer ,\r\n                selectedAnswer : \"\"                             \r\n\r\n              }\r\n          }))\r\n        })\r\n      },[])\r\n\r\n    \r\n   function updateselected( currentQuestion, answer){\r\n    \r\n    setQuestionsAndAnswers(questionsAndAnswers.map( (object) => {\r\n        return object.question === currentQuestion ? {...object, selectedAnswer: answer} : object\r\n    } ))\r\n   }   \r\n\r\n  const shuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);\r\n  const Q = questionsAndAnswers.map( (objects, index) => { \r\n    return (\r\n        <QuestionOne\r\n         key={index} \r\n         question = {objects.question}\r\n         allAnswers = {objects.shuffledAnswers}\r\n         updateselected = {updateselected}\r\n         />\r\n    )\r\n })\r\n \r\n    return(\r\n        <div>\r\n            { Q }\r\n           \r\n        </div>\r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AAAC;AAExC,eAAe,SAASC,SAAS,GAAE;EAAA;EAC/B,MAAM,CAACC,SAAS,EAACC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAM,CAACK,mBAAmB,EAACC,sBAAsB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE/DD,KAAK,CAACQ,SAAS,CAAE,MAAM;IACrBC,KAAK,CAAC,gFAAgF,CAAC,CACtFC,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAAEG,IAAI,IAAK;MACdR,YAAY,CAACQ,IAAI,CAACC,OAAO,CAAC;MAE1BP,sBAAsB,CAACM,IAAI,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;QAChD,OAAM;UACJC,QAAQ,EAAED,MAAM,CAACC,QAAQ;UACzBC,eAAe,EAAEC,YAAY,CAAC,CAAC,GAAGH,MAAM,CAACI,iBAAiB,EAC1BJ,MAAM,CAACK,cAAc,CAAC,CAAC;UACvDC,aAAa,EAAEN,MAAM,CAACK,cAAc;UACpCE,cAAc,EAAG;QAEnB,CAAC;MACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;EACJ,CAAC,EAAC,EAAE,CAAC;EAGR,SAASC,cAAc,CAAEC,eAAe,EAAEC,MAAM,EAAC;IAEhDnB,sBAAsB,CAACD,mBAAmB,CAACS,GAAG,CAAGC,MAAM,IAAK;MACxD,OAAOA,MAAM,CAACC,QAAQ,KAAKQ,eAAe,GAAG;QAAC,GAAGT,MAAM;QAAEO,cAAc,EAAEG;MAAM,CAAC,GAAGV,MAAM;IAC7F,CAAC,CAAE,CAAC;EACL;EAED,MAAMG,YAAY,GAAIQ,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;EACjE,MAAMC,CAAC,GAAGzB,mBAAmB,CAACS,GAAG,CAAE,CAACiB,OAAO,EAAEC,KAAK,KAAK;IACrD,oBACI,QAAC,WAAW;MAEX,QAAQ,EAAID,OAAO,CAACf,QAAS;MAC7B,UAAU,EAAIe,OAAO,CAACd,eAAgB;MACtC,cAAc,EAAIM;IAAe,GAH5BS,KAAK;MAAA;MAAA;MAAA;IAAA,QAIR;EAEV,CAAC,CAAC;EAEC,oBACI;IAAA,UACMF;EAAC;IAAA;IAAA;IAAA;EAAA,QAED;AAEd;AAAC,GAjDuB5B,SAAS;AAAA,KAATA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}