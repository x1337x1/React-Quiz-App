{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\PROJECTS\\\\WEB DEV\\\\REACTT\\\\reactt\\\\src\\\\comps\\\\questionsScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QuestionOne from './questionOne';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Questions() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [questionsAndAnswers, setQuestionsAndAnswers] = useState([]);\n  const [warningMsg, setWarningMsg] = React.useState(false);\n  React.useEffect(() => {\n    fetch('https://opentdb.com/api.php?amount=5&category=21&difficulty=easy&type=multiple').then(respone => respone.json()).then(data => {\n      setQuestions(data.results);\n      setQuestionsAndAnswers(data.results.map(object => {\n        return {\n          question: object.question,\n          shuffledAnswers: shuffleArray([...object.incorrect_answers, object.correct_answer]),\n          correctAnswer: object.correct_answer,\n          selectedAnswer: \"\"\n        };\n      }));\n    });\n  }, []);\n  function updateselected(currentQuestion, answer) {\n    setQuestionsAndAnswers(questionsAndAnswers.map(object => {\n      return object.question === currentQuestion ? {\n        ...object,\n        selectedAnswer: answer\n      } : object;\n    }));\n  }\n  function checkAnswers() {\n    const notAll = questionsAndAnswers.some(object => {\n      return object.selectedAnswer === '';\n    });\n    setWarningMsg(notAll);\n  }\n  const shuffleArray = arr => arr.sort(() => Math.random() - 0.5);\n  const Q = questionsAndAnswers.map((objects, index) => {\n    return /*#__PURE__*/_jsxDEV(QuestionOne, {\n      question: objects.question,\n      allAnswers: objects.shuffledAnswers,\n      selectedAnswer: objects.selectedAnswer,\n      updateselected: updateselected\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [Q, warningMsg && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"warning-msg\",\n      children: \" Please answer all question before checking \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 29\n    }, this), questions.length > 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"check-btn\",\n      onClick: checkAnswers,\n      children: \" Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 37\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(Questions, \"MNykeojE+MW/CQygosZ1IWRwNgE=\");\n_c = Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useState","QuestionOne","Questions","questions","setQuestions","questionsAndAnswers","setQuestionsAndAnswers","warningMsg","setWarningMsg","useEffect","fetch","then","respone","json","data","results","map","object","question","shuffledAnswers","shuffleArray","incorrect_answers","correct_answer","correctAnswer","selectedAnswer","updateselected","currentQuestion","answer","checkAnswers","notAll","some","arr","sort","Math","random","Q","objects","index","length"],"sources":["C:/Users/Administrator/Desktop/PROJECTS/WEB DEV/REACTT/reactt/src/comps/questionsScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport QuestionOne from './questionOne';\r\n\r\nexport default function Questions(){\r\n    const [questions,setQuestions] = useState([])\r\n    const [questionsAndAnswers,setQuestionsAndAnswers] = useState([])\r\n    const [warningMsg,setWarningMsg] = React.useState(false)\r\n\r\n      React.useEffect( () => {\r\n        fetch('https://opentdb.com/api.php?amount=5&category=21&difficulty=easy&type=multiple')\r\n        .then((respone) => respone.json())\r\n        .then((data) => {\r\n          setQuestions(data.results);\r\n\r\n          setQuestionsAndAnswers(data.results.map((object) => {\r\n              return{\r\n                question: object.question,\r\n                shuffledAnswers: shuffleArray([...object.incorrect_answers,\r\n                                                object.correct_answer]),\r\n                correctAnswer: object.correct_answer ,\r\n                selectedAnswer : \"\"                             \r\n\r\n              }\r\n          }))\r\n        })\r\n      },[])\r\n\r\n    \r\n   function updateselected( currentQuestion, answer){\r\n    setQuestionsAndAnswers(questionsAndAnswers.map( (object) => {\r\n        return object.question === currentQuestion ? {...object, selectedAnswer: answer} : object\r\n    } ))\r\n   }\r\n   \r\n   function checkAnswers(){\r\n    const notAll = questionsAndAnswers.some( (object) => {\r\n     return  object.selectedAnswer === '';\r\n    })\r\n    setWarningMsg(notAll)\r\n   }\r\n\r\n  const shuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);\r\n  const Q = questionsAndAnswers.map( (objects, index) => { \r\n    return (\r\n        <QuestionOne\r\n         key={index} \r\n         question = {objects.question}\r\n         allAnswers = {objects.shuffledAnswers}\r\n         selectedAnswer = {objects.selectedAnswer}\r\n         updateselected = {updateselected}\r\n         />\r\n    )\r\n })\r\n \r\n    return(\r\n        <div>\r\n            {Q}\r\n            { warningMsg && <p className='warning-msg'> Please answer all question before checking </p>}\r\n            {questions.length > 0 ? <button className='check-btn' onClick={checkAnswers}> Check Answers</button>\r\n             : null }\r\n            \r\n        </div>\r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,WAAW,MAAM,eAAe;AAAC;AAExC,eAAe,SAASC,SAAS,GAAE;EAAA;EAC/B,MAAM,CAACC,SAAS,EAACC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAM,CAACK,mBAAmB,EAACC,sBAAsB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACjE,MAAM,CAACO,UAAU,EAACC,aAAa,CAAC,GAAGT,KAAK,CAACC,QAAQ,CAAC,KAAK,CAAC;EAEtDD,KAAK,CAACU,SAAS,CAAE,MAAM;IACrBC,KAAK,CAAC,gFAAgF,CAAC,CACtFC,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAAEG,IAAI,IAAK;MACdV,YAAY,CAACU,IAAI,CAACC,OAAO,CAAC;MAE1BT,sBAAsB,CAACQ,IAAI,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;QAChD,OAAM;UACJC,QAAQ,EAAED,MAAM,CAACC,QAAQ;UACzBC,eAAe,EAAEC,YAAY,CAAC,CAAC,GAAGH,MAAM,CAACI,iBAAiB,EAC1BJ,MAAM,CAACK,cAAc,CAAC,CAAC;UACvDC,aAAa,EAAEN,MAAM,CAACK,cAAc;UACpCE,cAAc,EAAG;QAEnB,CAAC;MACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;EACJ,CAAC,EAAC,EAAE,CAAC;EAGR,SAASC,cAAc,CAAEC,eAAe,EAAEC,MAAM,EAAC;IAChDrB,sBAAsB,CAACD,mBAAmB,CAACW,GAAG,CAAGC,MAAM,IAAK;MACxD,OAAOA,MAAM,CAACC,QAAQ,KAAKQ,eAAe,GAAG;QAAC,GAAGT,MAAM;QAAEO,cAAc,EAAEG;MAAM,CAAC,GAAGV,MAAM;IAC7F,CAAC,CAAE,CAAC;EACL;EAEA,SAASW,YAAY,GAAE;IACtB,MAAMC,MAAM,GAAGxB,mBAAmB,CAACyB,IAAI,CAAGb,MAAM,IAAK;MACpD,OAAQA,MAAM,CAACO,cAAc,KAAK,EAAE;IACrC,CAAC,CAAC;IACFhB,aAAa,CAACqB,MAAM,CAAC;EACtB;EAED,MAAMT,YAAY,GAAIW,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC;EACjE,MAAMC,CAAC,GAAG9B,mBAAmB,CAACW,GAAG,CAAE,CAACoB,OAAO,EAAEC,KAAK,KAAK;IACrD,oBACI,QAAC,WAAW;MAEX,QAAQ,EAAID,OAAO,CAAClB,QAAS;MAC7B,UAAU,EAAIkB,OAAO,CAACjB,eAAgB;MACtC,cAAc,EAAIiB,OAAO,CAACZ,cAAe;MACzC,cAAc,EAAIC;IAAe,GAJ5BY,KAAK;MAAA;MAAA;MAAA;IAAA,QAKR;EAEV,CAAC,CAAC;EAEC,oBACI;IAAA,WACKF,CAAC,EACA5B,UAAU,iBAAI;MAAG,SAAS,EAAC,aAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiD,EAC1FJ,SAAS,CAACmC,MAAM,GAAG,CAAC,gBAAG;MAAQ,SAAS,EAAC,WAAW;MAAC,OAAO,EAAEV,YAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAwB,GACjG,IAAI;EAAA;IAAA;IAAA;IAAA;EAAA,QAEL;AAEd;AAAC,GA5DuB1B,SAAS;AAAA,KAATA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}